from typing import List, Set, Optional

class TreeNode:
    def __init__(self, val: int, left: Optional['TreeNode'] = None, right: Optional['TreeNode'] = None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def delNodes(self, root: TreeNode, to_delete: List[int]) -> List[TreeNode]:
        to_delete_set = set(to_delete)
        forest = []

        def helper(node: Optional[TreeNode], is_root: bool) -> Optional[TreeNode]:
            if not node:
                return None

            node_deleted = node.val in to_delete_set
            if is_root and not node_deleted:
                forest.append(node)

            node.left = helper(node.left, node_deleted)
            node.right = helper(node.right, node_deleted)

            return None if node_deleted else node

        helper(root, True)
        return forest
